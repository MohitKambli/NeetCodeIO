class Solution {
    public int helper(int i, int j, int m, int n, int[][] grid, int[][] dp) {
        if(i < 0 || i == m || j < 0 || j == n || grid[i][j] == 1)
            return 0;
        if(i == 0 && j == 0)
            return 1;
        if(dp[i][j] != -1)
            return dp[i][j];

        int up = helper(i-1, j, m, n, grid, dp);
        int left = helper(i, j-1, m, n, grid, dp);
        return dp[i][j] = up + left;
    }
    public int uniquePathsWithObstacles(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] dp = new int[m][n];
        for(int[] arr : dp)
            Arrays.fill(arr, -1);
        return helper(m-1, n-1, m, n, grid, dp);
    }
}
